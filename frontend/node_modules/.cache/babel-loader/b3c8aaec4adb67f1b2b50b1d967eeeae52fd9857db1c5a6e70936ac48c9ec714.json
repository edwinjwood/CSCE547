{"ast":null,"code":"export default class CartService {\n  constructor() {\n    this.items = void 0;\n    this.CART_KEY = 'rideFinderExampleApp';\n    //loadCart will be our public facing method, all invocations of getCart should be internal so we only have one source of truth\n    this.loadCart = () => {\n      return JSON.parse(localStorage.getItem(this.CART_KEY));\n    };\n    this.addItemToCart = newItem => {\n      const cart = this.loadCart() || [];\n      const itemInCart = cart.findIndex(item => item.park.id === newItem.park.id);\n      if (itemInCart > -1) {\n        this.updateCart(cart[itemInCart], newItem);\n      }\n      cart.push(newItem);\n      this.save(cart);\n    };\n    this.removeItemFromCart = remItem => {\n      const cart = this.loadCart();\n      const result = cart.filter(val => val.park.id !== remItem.park.id);\n      this.save(result);\n    };\n  }\n  updateCart(oldItem, newItem) {\n    const cart = this.loadCart();\n    if (oldItem.park.id !== newItem.park.id) {\n      this.save(cart);\n    }\n\n    //Update with new item first and then old item if it doesn't exist\n    const combinedItem = {\n      park: newItem.park || oldItem.park,\n      numDays: newItem.numDays || oldItem.numDays,\n      numAdults: newItem.numAdults || oldItem.numAdults,\n      numKids: newItem.numKids || oldItem.numKids\n    };\n    const index = cart.findIndex(val => val.park.id === combinedItem.park.id);\n    if (index > -1) {\n      cart[index] = combinedItem;\n    }\n    this.save(cart);\n  }\n  save(cart) {\n    localStorage.setItem(this.CART_KEY, JSON.stringify(cart));\n  }\n}","map":{"version":3,"names":["CartService","constructor","items","CART_KEY","loadCart","JSON","parse","localStorage","getItem","addItemToCart","newItem","cart","itemInCart","findIndex","item","park","id","updateCart","push","save","removeItemFromCart","remItem","result","filter","val","oldItem","combinedItem","numDays","numAdults","numKids","index","setItem","stringify"],"sources":["C:/Users/Butte/DirtBikePark/frontend/src/services/cartService.ts"],"sourcesContent":["import { CartItem } from \"../models/cartItem\";\n\nexport default class CartService {\n    private items: CartItem[];\n\n    private CART_KEY = 'rideFinderExampleApp'\n\n\n    //loadCart will be our public facing method, all invocations of getCart should be internal so we only have one source of truth\n\n    loadCart = (): CartItem[] => {\n        return JSON.parse(localStorage.getItem(this.CART_KEY));\n    }\n\n    addItemToCart = (newItem: CartItem) => {\n        const cart = this.loadCart() || [];\n        const itemInCart = cart.findIndex((item: CartItem) => item.park.id === newItem.park.id);\n        if(itemInCart > -1) {\n            this.updateCart(cart[itemInCart], newItem);\n        }\n        cart.push(newItem);\n        this.save(cart);\n    }\n\n    removeItemFromCart = (remItem: CartItem) => {\n        const cart = this.loadCart();\n        \n        const result = cart.filter((val: CartItem) => val.park.id !== remItem.park.id)\n        this.save(result);\n    }\n\n    updateCart(oldItem: CartItem, newItem: CartItem) {\n        const cart = this.loadCart();\n        if(oldItem.park.id !== newItem.park.id) {\n            this.save(cart);\n        }\n\n        //Update with new item first and then old item if it doesn't exist\n        const combinedItem = {\n            park: newItem.park || oldItem.park,\n            numDays: newItem.numDays || oldItem.numDays,\n            numAdults: newItem.numAdults || oldItem.numAdults,\n            numKids: newItem.numKids || oldItem.numKids\n        };\n        const index = cart.findIndex((val: CartItem) => val.park.id === combinedItem.park.id);\n        if(index > -1) {\n            cart[index] = combinedItem;\n        }\n        this.save(cart);\n    }\n\n    private save(cart: CartItem[]) {\n        localStorage.setItem(this.CART_KEY, JSON.stringify(cart));\n    }\n}"],"mappings":"AAEA,eAAe,MAAMA,WAAW,CAAC;EAAAC,YAAA;IAAA,KACrBC,KAAK;IAAA,KAELC,QAAQ,GAAG,sBAAsB;IAGzC;IAAA,KAEAC,QAAQ,GAAG,MAAkB;MACzB,OAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,IAAI,CAACL,QAAQ,CAAC,CAAC;IAC1D,CAAC;IAAA,KAEDM,aAAa,GAAIC,OAAiB,IAAK;MACnC,MAAMC,IAAI,GAAG,IAAI,CAACP,QAAQ,CAAC,CAAC,IAAI,EAAE;MAClC,MAAMQ,UAAU,GAAGD,IAAI,CAACE,SAAS,CAAEC,IAAc,IAAKA,IAAI,CAACC,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACK,IAAI,CAACC,EAAE,CAAC;MACvF,IAAGJ,UAAU,GAAG,CAAC,CAAC,EAAE;QAChB,IAAI,CAACK,UAAU,CAACN,IAAI,CAACC,UAAU,CAAC,EAAEF,OAAO,CAAC;MAC9C;MACAC,IAAI,CAACO,IAAI,CAACR,OAAO,CAAC;MAClB,IAAI,CAACS,IAAI,CAACR,IAAI,CAAC;IACnB,CAAC;IAAA,KAEDS,kBAAkB,GAAIC,OAAiB,IAAK;MACxC,MAAMV,IAAI,GAAG,IAAI,CAACP,QAAQ,CAAC,CAAC;MAE5B,MAAMkB,MAAM,GAAGX,IAAI,CAACY,MAAM,CAAEC,GAAa,IAAKA,GAAG,CAACT,IAAI,CAACC,EAAE,KAAKK,OAAO,CAACN,IAAI,CAACC,EAAE,CAAC;MAC9E,IAAI,CAACG,IAAI,CAACG,MAAM,CAAC;IACrB,CAAC;EAAA;EAEDL,UAAUA,CAACQ,OAAiB,EAAEf,OAAiB,EAAE;IAC7C,MAAMC,IAAI,GAAG,IAAI,CAACP,QAAQ,CAAC,CAAC;IAC5B,IAAGqB,OAAO,CAACV,IAAI,CAACC,EAAE,KAAKN,OAAO,CAACK,IAAI,CAACC,EAAE,EAAE;MACpC,IAAI,CAACG,IAAI,CAACR,IAAI,CAAC;IACnB;;IAEA;IACA,MAAMe,YAAY,GAAG;MACjBX,IAAI,EAAEL,OAAO,CAACK,IAAI,IAAIU,OAAO,CAACV,IAAI;MAClCY,OAAO,EAAEjB,OAAO,CAACiB,OAAO,IAAIF,OAAO,CAACE,OAAO;MAC3CC,SAAS,EAAElB,OAAO,CAACkB,SAAS,IAAIH,OAAO,CAACG,SAAS;MACjDC,OAAO,EAAEnB,OAAO,CAACmB,OAAO,IAAIJ,OAAO,CAACI;IACxC,CAAC;IACD,MAAMC,KAAK,GAAGnB,IAAI,CAACE,SAAS,CAAEW,GAAa,IAAKA,GAAG,CAACT,IAAI,CAACC,EAAE,KAAKU,YAAY,CAACX,IAAI,CAACC,EAAE,CAAC;IACrF,IAAGc,KAAK,GAAG,CAAC,CAAC,EAAE;MACXnB,IAAI,CAACmB,KAAK,CAAC,GAAGJ,YAAY;IAC9B;IACA,IAAI,CAACP,IAAI,CAACR,IAAI,CAAC;EACnB;EAEQQ,IAAIA,CAACR,IAAgB,EAAE;IAC3BJ,YAAY,CAACwB,OAAO,CAAC,IAAI,CAAC5B,QAAQ,EAAEE,IAAI,CAAC2B,SAAS,CAACrB,IAAI,CAAC,CAAC;EAC7D;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}