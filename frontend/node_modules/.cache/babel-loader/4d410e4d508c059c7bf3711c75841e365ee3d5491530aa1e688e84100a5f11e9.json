{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Butte\\\\DirtBikePark\\\\frontend\\\\src\\\\organisms\\\\Home\\\\home.tsx\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport FeaturedParks from \"../../components/FeaturedParks/featuredParks\";\nimport HeroContent from \"../../components/HeroContent/heroContent\";\nimport Search from \"../../components/Search/search\";\nimport './home.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Home(props) {\n  _s();\n  const {\n    parkService\n  } = props;\n  const [parks, setParks] = useState([]);\n  //For the purposes of this, empty string location and rating 0 will be considered default\n  const [searchParams, setSearchParams] = useState({\n    location: \"\",\n    rating: 0\n  });\n  useEffect(() => {\n    parkService.getAllParks().then(res => {\n      setParks(res);\n    });\n  }, [parkService]);\n\n  //This should be done with actual geolocation but none of these parks are real\n  //So to simulate, it's just going to be a random chance\n  const isNear = (firstLocation, secondLocation) => {\n    const randomChance = Math.random();\n    return randomChance > .2 ? true : false;\n  };\n  const getAverageRating = reviews => {\n    return reviews.reduce((acc, curr) => acc + curr.rating, 0) / reviews.length;\n  };\n  const searchFn = params => {\n    setSearchParams(params);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(HeroContent, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Search, {\n      searchFn: searchFn\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(FeaturedParks, {\n      allParks: parks.filter(park => isNear(park.location, searchParams.location) && getAverageRating(park.reviews) > searchParams.rating)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 9\n  }, this);\n}\n_s(Home, \"hZMIkltNx/gCICa+8ZKlime8CLA=\");\n_c = Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["useEffect","useState","FeaturedParks","HeroContent","Search","jsxDEV","_jsxDEV","Home","props","_s","parkService","parks","setParks","searchParams","setSearchParams","location","rating","getAllParks","then","res","isNear","firstLocation","secondLocation","randomChance","Math","random","getAverageRating","reviews","reduce","acc","curr","length","searchFn","params","children","fileName","_jsxFileName","lineNumber","columnNumber","allParks","filter","park","_c","$RefreshReg$"],"sources":["C:/Users/Butte/DirtBikePark/frontend/src/organisms/Home/home.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport FeaturedParks from \"../../components/FeaturedParks/featuredParks\";\nimport HeroContent from \"../../components/HeroContent/heroContent\";\nimport Search from \"../../components/Search/search\";\nimport CartService from \"../../services/cartService\";\nimport ParkService from \"../../services/parkService\";\nimport './home.css';\nimport IPark from \"../../models/park\";\nimport Review from \"../../models/review\";\n\ninterface HomeProps {\n    parkService: ParkService\n    cartService: CartService;\n}\n\ntype searchParams = {\n    location: string,\n    rating: number\n}\n\nexport default function Home(props: HomeProps) {\n    const { parkService } = props;\n\n    const [parks, setParks] = useState([] as IPark[])\n    //For the purposes of this, empty string location and rating 0 will be considered default\n    const [searchParams, setSearchParams] = useState({location: \"\", rating: 0} as searchParams)\n\n    useEffect(() => {\n        parkService.getAllParks().then((res) => {\n            setParks(res);\n        })\n    }, [parkService])\n\n    //This should be done with actual geolocation but none of these parks are real\n    //So to simulate, it's just going to be a random chance\n    const isNear = (firstLocation: string, secondLocation: string) => {\n        const randomChance = Math.random()\n        return randomChance > .2 ? true : false;\n    }\n\n    const getAverageRating = (reviews: Review[]) => {\n        return (reviews.reduce((acc, curr) => acc + curr.rating, 0) / reviews.length) \n    }\n\n    const searchFn = (params: searchParams) => {\n        setSearchParams(params);\n    }\n\n    return (\n        <div>\n            <HeroContent /> \n            <Search searchFn={searchFn} />\n            <FeaturedParks allParks={parks.filter((park) => isNear(park.location, searchParams.location) && getAverageRating(park.reviews) > searchParams.rating)} />\n        </div>\n    )\n}"],"mappings":";;AAAA,SAASA,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAC3C,OAAOC,aAAa,MAAM,8CAA8C;AACxE,OAAOC,WAAW,MAAM,0CAA0C;AAClE,OAAOC,MAAM,MAAM,gCAAgC;AAGnD,OAAO,YAAY;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAcpB,eAAe,SAASC,IAAIA,CAACC,KAAgB,EAAE;EAAAC,EAAA;EAC3C,MAAM;IAAEC;EAAY,CAAC,GAAGF,KAAK;EAE7B,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGX,QAAQ,CAAC,EAAa,CAAC;EACjD;EACA,MAAM,CAACY,YAAY,EAAEC,eAAe,CAAC,GAAGb,QAAQ,CAAC;IAACc,QAAQ,EAAE,EAAE;IAAEC,MAAM,EAAE;EAAC,CAAiB,CAAC;EAE3FhB,SAAS,CAAC,MAAM;IACZU,WAAW,CAACO,WAAW,CAAC,CAAC,CAACC,IAAI,CAAEC,GAAG,IAAK;MACpCP,QAAQ,CAACO,GAAG,CAAC;IACjB,CAAC,CAAC;EACN,CAAC,EAAE,CAACT,WAAW,CAAC,CAAC;;EAEjB;EACA;EACA,MAAMU,MAAM,GAAGA,CAACC,aAAqB,EAAEC,cAAsB,KAAK;IAC9D,MAAMC,YAAY,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;IAClC,OAAOF,YAAY,GAAG,EAAE,GAAG,IAAI,GAAG,KAAK;EAC3C,CAAC;EAED,MAAMG,gBAAgB,GAAIC,OAAiB,IAAK;IAC5C,OAAQA,OAAO,CAACC,MAAM,CAAC,CAACC,GAAG,EAAEC,IAAI,KAAKD,GAAG,GAAGC,IAAI,CAACd,MAAM,EAAE,CAAC,CAAC,GAAGW,OAAO,CAACI,MAAM;EAChF,CAAC;EAED,MAAMC,QAAQ,GAAIC,MAAoB,IAAK;IACvCnB,eAAe,CAACmB,MAAM,CAAC;EAC3B,CAAC;EAED,oBACI3B,OAAA;IAAA4B,QAAA,gBACI5B,OAAA,CAACH,WAAW;MAAAgC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eACfhC,OAAA,CAACF,MAAM;MAAC4B,QAAQ,EAAEA;IAAS;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAC9BhC,OAAA,CAACJ,aAAa;MAACqC,QAAQ,EAAE5B,KAAK,CAAC6B,MAAM,CAAEC,IAAI,IAAKrB,MAAM,CAACqB,IAAI,CAAC1B,QAAQ,EAAEF,YAAY,CAACE,QAAQ,CAAC,IAAIW,gBAAgB,CAACe,IAAI,CAACd,OAAO,CAAC,GAAGd,YAAY,CAACG,MAAM;IAAE;MAAAmB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACxJ,CAAC;AAEd;AAAC7B,EAAA,CAnCuBF,IAAI;AAAAmC,EAAA,GAAJnC,IAAI;AAAA,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}